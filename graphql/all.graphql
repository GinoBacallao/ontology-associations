type AbstractThing
  {
    id: Curie!
  }

interface Association
  {
  }

type AssociationDocument
  {
    dateGenerated: String
    generatedBy: Provider
    url: String
    projectRelease: String
    funding: String
    goVersion: String
    roVersion: String
    gorelVersion: String
    associations: [Association]
  }

interface BiologicalEntity
  {
  }

type CausaltabInteraction
  {
    iD(s)InteractorA: Identifier
    iD(s)InteractorB: Identifier
    alt.ID(s)InteractorA: [Identifier]
    alt.ID(s)InteractorB: [String]
    alias(es)InteractorA: [Identifier]
    alias(es)InteractorB: [Identifier]
    interactionDetectionMethod(s): InteractionDetectionMethodEnum
    publication1stAuthor(s): String
    publicationIdentifier(s): [Identifier]
    taxidInteractorA: [TaxidIdentifier]
    taxidInteractorB: [TaxidIdentifier]
    interactionType(s): InteractionTypeEnum
    sourceDatabase(s): Psi-miIdentifier
    interactionIdentifier(s): [Identifier]
    confidenceValue(s): Intact-miscoreIdentifier
    expansionMethod(s): ExpansionMethodEnum
    biologicalRole(s)InteractorA: BiologicalRoleInteractorEnum
    biologicalRole(s)InteractorB: BiologicalRoleInteractorEnum
    experimentalRole(s)InteractorA: ExperimentalRoleInteractorEnum
    experimentalRole(s)InteractorB: ExperimentalRoleInteractorEnum
    type(s)InteractorA: Psi-miIdentifier
    type(s)InteractorB: Psi-miIdentifier
    xref(s)InteractorA: [Identifier]
    xref(s)InteractorB: [Identifier]
    interactionXref(s): [InteractionXrefEnum]
    annotation(s)InteractorA: String
    annotation(s)InteractorB: [String]
    interactionAnnotation(s): [Identifier]
    hostOrganism(s): [TaxidIdentifier]
    interactionParameter(s): String
    creationDate: Datetime
    updateDate: Datetime
    checksum(s)InteractorA: RogidIdentifier
    checksum(s)InteractorB: String
    interactionChecksum(s): [Identifier]
    negative: NegativeEnum
    feature(s)InteractorA: [String]
    feature(s)InteractorB: [String]
    stoichiometry(s)InteractorA: StoichiometryInteractorEnum
    stoichiometry(s)InteractorB: StoichiometryInteractorEnum
    identificationMethodParticipantA: Psi-miIdentifier
    identificationMethodParticipantB: Psi-miIdentifier
    biologicalEffectInteractorA: BiologicalEffectInteractorEnum
    biologicalEffectInteractorB: BiologicalEffectInteractorEnum
    causalRegulatoryMechanism: CausalRegulatoryMechanismEnum
    causalStatement: Psi-miIdentifier
  }

type ConjunctionExtensionExpression
  {
  }

type ControlledTerm
  {
    id: Curie!
  }

interface Denormalized
  {
  }

interface Document
  {
  }

interface Entity
  {
  }

type GafAssociation implements Denormalized, GoRelated
  {
    db: String!
    localId: String!
    dbObjectSymbol: SymbolType!
    qualifiers: [Gp2termRelationEnum]
    ontologyClassRef: AbstractThing!
    supportingReferences: [Publication]!
    evidenceType: OntologyClass!
    withOrFrom: [AbstractThing]
    aspect: GeneOntologyAspectEnum!
    dbObjectName: NameType
    dbObjectSynonyms: [NameType]
    dbObjectType: GpEntityTypeEnum
    dbObjectTaxon: Taxon!
    annotationDate: Datetime
    assignedBy: Provider!
    annotationExtensions: [ConjunctionExtensionExpression]
    geneProductForm: BiologicalEntity
  }

type GafAssociationDocument
  {
    dateGenerated: String
    generatedBy: Provider
    url: String
    projectRelease: String
    funding: String
    goVersion: String
    roVersion: String
    gorelVersion: String
    associations: [GafAssociation]
  }

interface GoRelated
  {
  }

type GpadAssociation implements Denormalized, GoRelated
  {
    dbObjectRef: AbstractThing!
    negation: Boolean
    relation: Gp2termRelationEnum!
    ontologyClassRef: AbstractThing!
    supportingReferences: [Publication]!
    evidenceType: OntologyClass!
    withOrFrom: [AbstractThing]
    interactingTaxonRef: [Taxon]
    annotationDate: Datetime
    assignedBy: Provider!
    annotationExtensions: [ConjunctionExtensionExpression]
    annotationProperties: [PropertyValuePair]
    dbObjectType: GpEntityTypeEnum
  }

type GpadAssociationDocument
  {
    dateGenerated: String
    generatedBy: Provider
    url: String
    projectRelease: String
    funding: String
    goVersion: String
    roVersion: String
    gorelVersion: String
    associations: [GpadAssociation]
  }

type GpiDocument
  {
    entities: [GpiEntity]
  }

type GpiEntity
  {
    dbObjectRef: AbstractThing!
    dbObjectSymbol: SymbolType!
    dbObjectName: NameType
    dbObjectSynonyms: [NameType]
    dbObjectType: String
    dbObjectTaxon: Taxon!
    encodedBy: [AbstractThing]
    parentProtein: [AbstractThing]
    proteinContainingComplexMembers: [AbstractThing]
    dbXrefs: [Curie]
    geneProductProperties: [PropertyValuePair]
  }

type HumanPhenotypeOntologyAssociation implements Denormalized
  {
    db: String!
    localId: String!
    dbObjectSymbol: SymbolType!
    relation: String!
    ontologyClassRef: AbstractThing!
    supportingReferences: [Publication]!
    evidenceType: OntologyClass!
    onset: String
    frequency: String
    withOrFrom: [AbstractThing]
    aspect: String!
    dbObjectSynonyms: [NameType]
    annotationDate: Datetime
    assignedBy: Provider!
  }

type HumanPhenotypeOntologyAssociationDocument
  {
    dateGenerated: String
    generatedBy: Provider
    url: String
    projectRelease: String
    funding: String
    goVersion: String
    roVersion: String
    gorelVersion: String
    associations: [HumanPhenotypeOntologyAssociation]
  }

type Interaction
  {
  }

type MitabInteraction
  {
    iD(s)InteractorA: Identifier
    iD(s)InteractorB: Identifier
    alt.ID(s)InteractorA: [Identifier]
    alt.ID(s)InteractorB: [String]
    alias(es)InteractorA: [Identifier]
    alias(es)InteractorB: [Identifier]
    interactionDetectionMethod(s): InteractionDetectionMethodEnum
    publication1stAuthor(s): String
    publicationIdentifier(s): [Identifier]
    taxidInteractorA: [TaxidIdentifier]
    taxidInteractorB: [TaxidIdentifier]
    interactionType(s): InteractionTypeEnum
    sourceDatabase(s): Psi-miIdentifier
    interactionIdentifier(s): [Identifier]
    confidenceValue(s): Intact-miscoreIdentifier
    expansionMethod(s): ExpansionMethodEnum
    biologicalRole(s)InteractorA: BiologicalRoleInteractorEnum
    biologicalRole(s)InteractorB: BiologicalRoleInteractorEnum
    experimentalRole(s)InteractorA: ExperimentalRoleInteractorEnum
    experimentalRole(s)InteractorB: ExperimentalRoleInteractorEnum
    type(s)InteractorA: Psi-miIdentifier
    type(s)InteractorB: Psi-miIdentifier
    xref(s)InteractorA: [Identifier]
    xref(s)InteractorB: [Identifier]
    interactionXref(s): [InteractionXrefEnum]
    annotation(s)InteractorA: String
    annotation(s)InteractorB: [String]
    interactionAnnotation(s): [Identifier]
    hostOrganism(s): [TaxidIdentifier]
    interactionParameter(s): String
    creationDate: Datetime
    updateDate: Datetime
    checksum(s)InteractorA: RogidIdentifier
    checksum(s)InteractorB: String
    interactionChecksum(s): [Identifier]
    negative: NegativeEnum
    feature(s)InteractorA: [String]
    feature(s)InteractorB: [String]
    stoichiometry(s)InteractorA: StoichiometryInteractorEnum
    stoichiometry(s)InteractorB: StoichiometryInteractorEnum
    identificationMethodParticipantA: Psi-miIdentifier
    identificationMethodParticipantB: Psi-miIdentifier
  }

interface Normalized
  {
  }

type OntologyClass
  {
    id: Curie!
  }

type PropertyValuePair
  {
    property: ControlledTerm
    value: String
  }

type Provider
  {
    id: Curie!
  }

type Publication
  {
    id: Curie!
  }

type RelationTerm
  {
    id: Curie!
  }

type SimpleGafAssociation
  {
    db: String!
    localId: String!
    dbObjectSymbol: SymbolType!
    ontologyClassRef: AbstractThing!
    supportingReferences: [Publication]!
    evidenceType: OntologyClass!
    withOrFrom: [AbstractThing]
    aspect: GeneOntologyAspectEnum!
    dbObjectName: NameType
    dbObjectSynonyms: [NameType]
    dbObjectType: GpEntityTypeEnum
    dbObjectTaxon: Taxon!
    annotationDate: Datetime
    assignedBy: Provider!
    annotationExtensions: [ConjunctionExtensionExpression]
    geneProductForm: BiologicalEntity
    qualifiers: [SimpleQualifierEnum]
  }

type Taxon
  {
    id: Curie!
  }


